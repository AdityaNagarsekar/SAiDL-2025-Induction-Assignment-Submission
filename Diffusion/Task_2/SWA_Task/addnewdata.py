"""
Augments images from an input directory by first resizing them, then adding
noise and/or horizontal flips, saving both the resized original and the
augmented version to an output directory.
"""

import argparse
import os
import random
import numpy as np
from PIL import Image, ImageOps, UnidentifiedImageError
from tqdm import tqdm
import sys

def print_info(text):
    """Prints an info message."""
    print(f">>> {text}")

def print_error(text):
    """Prints an error message."""
    print(f"!!! ERROR: {text}", file=sys.stderr)

def print_warning(text):
    """Prints a warning message."""
    print(f"!!! WARNING: {text}", file=sys.stderr)


def add_gaussian_noise(image_pil, std_dev):
    """Adds Gaussian noise to a PIL image."""
    if std_dev <= 0:
        return image_pil # No noise to add

    try:
        # Ensure image is float32 for noise addition
        img_array = np.array(image_pil).astype(np.float32)
        noise = np.random.normal(loc=0.0, scale=std_dev, size=img_array.shape)
        noisy_array = img_array + noise
        # Clip values to valid range [0, 255]
        noisy_array = np.clip(noisy_array, 0, 255)
        # Convert back to uint8 for saving
        noisy_img_pil = Image.fromarray(noisy_array.astype(np.uint8))
        return noisy_img_pil
    except Exception as e:
        print_error(f"Failed to add noise: {e}")
        return image_pil # Return original on error


def augment_images(input_dir, output_dir, image_size=256, flip_prob=0.5, noise_std=10.0):
    """
    Processes images from input_dir, resizes them, saves the resized original,
    and saves one augmented version (flipped and/or noisy) to output_dir.
    """
    target_size = (image_size, image_size)
    print_info(f"Input directory: {os.path.abspath(input_dir)}")
    print_info(f"Output directory: {os.path.abspath(output_dir)}")
    print_info(f"Target Resize Size: {target_size}")
    print_info(f"Horizontal Flip Probability: {flip_prob}")
    print_info(f"Gaussian Noise Standard Deviation: {noise_std}")

    if not os.path.isdir(input_dir):
        print_error(f"Input directory not found: {input_dir}")
        return

    # Create output directory if it doesn't exist
    try:
        os.makedirs(output_dir, exist_ok=True)
        print_info(f"Ensured output directory exists.")
    except OSError as e:
        print_error(f"Could not create output directory: {e}")
        return

    valid_extensions = ('.png', '.jpg', '.jpeg', '.bmp', '.webp')
    image_files = []
    print_info("Scanning for image files...")
    for filename in os.listdir(input_dir):
         # Check if it's a file and has a valid extension
         if os.path.isfile(os.path.join(input_dir, filename)) and filename.lower().endswith(valid_extensions):
             # Also check if it's *not* one of the files generated by a previous run in the same directory
             if not (filename.endswith(f"_orig{os.path.splitext(filename)[1]}") or filename.endswith(f"_aug{os.path.splitext(filename)[1]}")):
                 image_files.append(filename)

    if not image_files:
        print_warning("No valid original image files found to process in the input directory.")
        return

    print_info(f"Found {len(image_files)} original image files to process.")

    processed_count = 0
    augmented_count = 0
    error_count = 0

    for filename in tqdm(image_files, desc="Resizing and Augmenting"):
        input_path = os.path.join(input_dir, filename)
        base_name, ext = os.path.splitext(filename)

        # Define output paths
        # Ensure the base name doesn't accidentally contain _orig or _aug already
        base_name = base_name.replace("_orig", "").replace("_aug", "")
        output_original_path = os.path.join(output_dir, f"{base_name}_orig{ext}")
        output_augmented_path = os.path.join(output_dir, f"{base_name}_aug{ext}")

        try:
            # Load original image, ensure RGB
            img_original = Image.open(input_path).convert('RGB')

            # +++ Resize the image +++
            # Use LANCZOS for high-quality downsampling/upsampling
            try:
                 img_resized = img_original.resize(target_size, Image.Resampling.LANCZOS)
            except ValueError: # Handle potential ANTIALIAS requirement for older Pillow
                 try:
                      img_resized = img_original.resize(target_size, Image.Resampling.ANTIALIAS)
                 except AttributeError: # Handle even older Pillow without ANTIALIAS
                      img_resized = img_original.resize(target_size, Image.LANCZOS)

            # 1. Save the *resized* original (renamed slightly)
            img_resized.save(output_original_path)

            # 2. Create augmented version *from the resized image*
            img_to_augment = img_resized.copy() # Start with a copy of the resized image

            # Apply horizontal flip maybe
            if random.random() < flip_prob:
                img_to_augment = ImageOps.mirror(img_to_augment)

            # Apply noise maybe
            if noise_std > 0:
                img_to_augment = add_gaussian_noise(img_to_augment, noise_std)

            # Save the augmented version
            img_to_augment.save(output_augmented_path)

            processed_count += 1
            augmented_count += 1

        except UnidentifiedImageError:
            print_warning(f"\nSkipping file, cannot identify image file: {filename}")
            error_count += 1
        except Exception as e:
            print_error(f"\nFailed processing {filename}: {e}")
            error_count += 1

    print_info("\n--- Augmentation Summary ---")
    print_info(f"Successfully processed (resized originals saved): {processed_count}")
    print_info(f"Successfully generated augmented versions: {augmented_count}")
    print_info(f"Errors encountered/Skipped: {error_count}")
    print_info(f"Total images in output directory (approx): {processed_count + augmented_count}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Resize and augment images.")
    parser.add_argument(
        "--input-dir",
        type=str,
        required=True,
        help="Directory containing the original images."
    )
    parser.add_argument(
        "--output-dir",
        type=str,
        required=True,
        help="Directory where resized originals and augmented images will be saved."
    )
    parser.add_argument(
        "--image-size",
        type=int,
        default=256,
        help="Target size (width and height) to resize images to."
    )
    parser.add_argument(
        "--flip-prob",
        type=float,
        default=0.5,
        help="Probability (0.0 to 1.0) of applying a horizontal flip to the augmented image."
    )
    parser.add_argument(
        "--noise-std",
        type=float,
        default=10.0,
        help="Standard deviation for Gaussian noise added to the augmented image. Set to 0 to disable noise."
    )

    args = parser.parse_args()

    # Validate inputs
    if args.image_size <= 0:
        print_error("image_size must be positive.")
        sys.exit(1)
    if not 0.0 <= args.flip_prob <= 1.0:
        print_error("flip_prob must be between 0.0 and 1.0")
        sys.exit(1)
    if args.noise_std < 0:
        print_error("noise_std cannot be negative.")
        sys.exit(1)

    augment_images(args.input_dir, args.output_dir, args.image_size, args.flip_prob, args.noise_std)